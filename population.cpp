#include "population.h"
#include "point.h"
#include <cmath>
#include <qdebug.h>
#include <chrono>
#include <algorithm>

Population::Population(int populationSize, int length, int degree, const QVector<Point>& points, bool oldMethod) : individuals{}, child1{Individual(length,degree)}, child2{child1}
{
    this->degree = degree;
    pPoints = points;

    individuals.reserve(populationSize);
    Individual::setMt(std::mt19937{static_cast<std::uint32_t>(std::chrono::high_resolution_clock::now().time_since_epoch().count())});

    //cr√©er la population
    for(int i = 0 ; i<populationSize ; i++){
        individuals.push_back(Individual(length,degree));
    }

    //transformer le tableau de points de passage en deux tableaux de double
    QVector<double> xVec, yVec;
    xVec.reserve(points.length());
    yVec.reserve(points.length());
    xVec.push_back(points[0].getValueAtDimension(0));
    yVec.push_back(points[0].getValueAtDimension(1));

    //calculer les temps auxquels la courbe doit passer par les points de passage
    tp.resize(points.length());
    tp[0] = 0;
    //alpha utile pour la methode centripetale http://www.cad.zju.edu.cn/home/zhx/GM/009/00-bsia.pdf
//    double alpha = 2;
    for(int i = 1 ; i<points.length() ; i++)
    {
        xVec.push_back(points[i].getValueAtDimension(0));
        yVec.push_back(points[i].getValueAtDimension(1));

        //methode de la corde -> methode centripetale avec alpha = 1
        tp[i] = tp[i-1] + sqrt(pow(points[i].getValueAtDimension(1)-points[i-1].getValueAtDimension(1),2) +
                pow(points[i].getValueAtDimension(0)-points[i-1].getValueAtDimension(0),2));

//        //methode centripetale
//        tp[i] = tp[i-1] + pow(sqrt(pow(points[i].getValueAtDimension(1)-points[i-1].getValueAtDimension(1),2) +
//                              pow(points[i].getValueAtDimension(0)-points[i-1].getValueAtDimension(0),2)),alpha);

        //rester conforme aux articles qui ne traitent que des fonctions y=f(x)
//        tp[i] = points[i].getValueAtDimension(0);
    }

    //range les t dans [0,1[
    for(int k = 1 ; k<points.length()-1 ; k++)
    {
        tp[k] /= tp[points.length()-1];
    }
    tp[points.length()-1] = 1-EPS;

    //temps pour "exempleSplinePtsPassage.txt", X temps entre chaque noeud, ici X = 16
//    tp = {0, 0.0133333, 0.0266667, 0.04, 0.0533333, 0.0666667, 0.08, 0.0933333, 0.106667, 0.12, 0.133333, 0.146667, 0.16, 0.173333, 0.186667, 0.2,
//          0.2, 0.206667, 0.213333, 0.22, 0.226667, 0.233333, 0.24, 0.246667, 0.253333, 0.26, 0.266667, 0.273333, 0.28, 0.286667, 0.293333, 0.3,
//          0.3, 0.306667, 0.313333, 0.32, 0.326667, 0.333333, 0.34, 0.346667, 0.353333, 0.36, 0.366667, 0.373333, 0.38, 0.386667, 0.393333, 0.4,
//          0.4, 0.413333, 0.426667, 0.44, 0.453333, 0.466667, 0.48, 0.493333, 0.506667, 0.52, 0.533333, 0.546667, 0.56, 0.573333, 0.586667, 0.6,
//          0.6, 0.601333, 0.602667, 0.604, 0.605333, 0.606667, 0.608, 0.609333, 0.610667, 0.612, 0.613333, 0.614667, 0.616, 0.617333, 0.618667, 0.62,
//          0.62, 0.621333, 0.622667, 0.624, 0.625333, 0.626667, 0.628, 0.629333, 0.630667, 0.632, 0.633333, 0.634667, 0.636, 0.637333, 0.638667, 0.64,
//          0.64, 0.664, 0.688, 0.712, 0.736, 0.76, 0.784, 0.808, 0.832, 0.856, 0.88, 0.904, 0.928, 0.952, 0.976, 1-EPS};

    //temps pour "exempleTemps_test"
//    tp = {0, 0.000133333, 0.000266667, 0.0004, 0.000533333, 0.000666667, 0.0008, 0.000933333, 0.00106667, 0.0012, 0.00133333, 0.00146667, 0.0016, 0.00173333, 0.00186667, 0.002, 0.00213333, 0.00226667, 0.0024, 0.00253333, 0.00266667, 0.0028, 0.00293333, 0.00306667, 0.0032, 0.00333333, 0.00346667, 0.0036, 0.00373333, 0.00386667, 0.004, 0.00413333, 0.00426667, 0.0044, 0.00453333, 0.00466667, 0.0048, 0.00493333, 0.00506667, 0.0052, 0.00533333, 0.00546667, 0.0056, 0.00573333, 0.00586667, 0.006, 0.00613333, 0.00626667, 0.0064, 0.00653333, 0.00666667, 0.0068, 0.00693333, 0.00706667, 0.0072, 0.00733333, 0.00746667, 0.0076, 0.00773333, 0.00786667, 0.008, 0.00813333, 0.00826667, 0.0084, 0.00853333, 0.00866667, 0.0088, 0.00893333, 0.00906667, 0.0092, 0.00933333, 0.00946667, 0.0096, 0.00973333, 0.00986667, 0.01, 0.0101333, 0.0102667, 0.0104, 0.0105333, 0.0106667, 0.0108, 0.0109333, 0.0110667, 0.0112, 0.0113333, 0.0114667, 0.0116, 0.0117333, 0.0118667, 0.012, 0.0121333, 0.0122667, 0.0124, 0.0125333, 0.0126667, 0.0128, 0.0129333, 0.0130667, 0.0132, 0.0133333, 0.0134667, 0.0136, 0.0137333, 0.0138667, 0.014, 0.0141333, 0.0142667, 0.0144, 0.0145333, 0.0146667, 0.0148, 0.0149333, 0.0150667, 0.0152, 0.0153333, 0.0154667, 0.0156, 0.0157333, 0.0158667, 0.016, 0.0161333, 0.0162667, 0.0164, 0.0165333, 0.0166667, 0.0168, 0.0169333, 0.0170667, 0.0172, 0.0173333, 0.0174667, 0.0176, 0.0177333, 0.0178667, 0.018, 0.0181333, 0.0182667, 0.0184, 0.0185333, 0.0186667, 0.0188, 0.0189333, 0.0190667, 0.0192, 0.0193333, 0.0194667, 0.0196, 0.0197333, 0.0198667, 0.02, 0.0201333, 0.0202667, 0.0204, 0.0205333, 0.0206667, 0.0208, 0.0209333, 0.0210667, 0.0212, 0.0213333, 0.0214667, 0.0216, 0.0217333, 0.0218667, 0.022, 0.0221333, 0.0222667, 0.0224, 0.0225333, 0.0226667, 0.0228, 0.0229333, 0.0230667, 0.0232, 0.0233333, 0.0234667, 0.0236, 0.0237333, 0.0238667, 0.024, 0.0241333, 0.0242667, 0.0244, 0.0245333, 0.0246667, 0.0248, 0.0249333, 0.0250667, 0.0252, 0.0253333, 0.0254667, 0.0256, 0.0257333, 0.0258667, 0.026, 0.0261333, 0.0262667, 0.0264, 0.0265333, 0.0266667, 0.0268, 0.0269333, 0.0270667, 0.0272, 0.0273333, 0.0274667, 0.0276, 0.0277333, 0.0278667, 0.028, 0.0281333, 0.0282667, 0.0284, 0.0285333, 0.0286667, 0.0288, 0.0289333, 0.0290667, 0.0292, 0.0293333, 0.0294667, 0.0296, 0.0297333, 0.0298667, 0.03, 0.0301333, 0.0302667, 0.0304, 0.0305333, 0.0306667, 0.0308, 0.0309333, 0.0310667, 0.0312, 0.0313333, 0.0314667, 0.0316, 0.0317333, 0.0318667, 0.032, 0.0321333, 0.0322667, 0.0324, 0.0325333, 0.0326667, 0.0328, 0.0329333, 0.0330667, 0.0332, 0.0333333, 0.0334667, 0.0336, 0.0337333, 0.0338667, 0.034, 0.0341333, 0.0342667, 0.0344, 0.0345333, 0.0346667, 0.0348, 0.0349333, 0.0350667, 0.0352, 0.0353333, 0.0354667, 0.0356, 0.0357333, 0.0358667, 0.036, 0.0361333, 0.0362667, 0.0364, 0.0365333, 0.0366667, 0.0368, 0.0369333, 0.0370667, 0.0372, 0.0373333, 0.0374667, 0.0376, 0.0377333, 0.0378667, 0.038, 0.0381333, 0.0382667, 0.0384, 0.0385333, 0.0386667, 0.0388, 0.0389333, 0.0390667, 0.0392, 0.0393333, 0.0394667, 0.0396, 0.0397333, 0.0398667, 0.04, 0.0401333, 0.0402667, 0.0404, 0.0405333, 0.0406667, 0.0408, 0.0409333, 0.0410667, 0.0412, 0.0413333, 0.0414667, 0.0416, 0.0417333, 0.0418667, 0.042, 0.0421333, 0.0422667, 0.0424, 0.0425333, 0.0426667, 0.0428, 0.0429333, 0.0430667, 0.0432, 0.0433333, 0.0434667, 0.0436, 0.0437333, 0.0438667, 0.044, 0.0441333, 0.0442667, 0.0444, 0.0445333, 0.0446667, 0.0448, 0.0449333, 0.0450667, 0.0452, 0.0453333, 0.0454667, 0.0456, 0.0457333, 0.0458667, 0.046, 0.0461333, 0.0462667, 0.0464, 0.0465333, 0.0466667, 0.0468, 0.0469333, 0.0470667, 0.0472, 0.0473333, 0.0474667, 0.0476, 0.0477333, 0.0478667, 0.048, 0.0481333, 0.0482667, 0.0484, 0.0485333, 0.0486667, 0.0488, 0.0489333, 0.0490667, 0.0492, 0.0493333, 0.0494667, 0.0496, 0.0497333, 0.0498667, 0.05, 0.0501333, 0.0502667, 0.0504, 0.0505333, 0.0506667, 0.0508, 0.0509333, 0.0510667, 0.0512, 0.0513333, 0.0514667, 0.0516, 0.0517333, 0.0518667, 0.052, 0.0521333, 0.0522667, 0.0524, 0.0525333, 0.0526667, 0.0528, 0.0529333, 0.0530667, 0.0532, 0.0533333, 0.0534667, 0.0536, 0.0537333, 0.0538667, 0.054, 0.0541333, 0.0542667, 0.0544, 0.0545333, 0.0546667, 0.0548, 0.0549333, 0.0550667, 0.0552, 0.0553333, 0.0554667, 0.0556, 0.0557333, 0.0558667, 0.056, 0.0561333, 0.0562667, 0.0564, 0.0565333, 0.0566667, 0.0568, 0.0569333, 0.0570667, 0.0572, 0.0573333, 0.0574667, 0.0576, 0.0577333, 0.0578667, 0.058, 0.0581333, 0.0582667, 0.0584, 0.0585333, 0.0586667, 0.0588, 0.0589333, 0.0590667, 0.0592, 0.0593333, 0.0594667, 0.0596, 0.0597333, 0.0598667, 0.06, 0.0601333, 0.0602667, 0.0604, 0.0605333, 0.0606667, 0.0608, 0.0609333, 0.0610667, 0.0612, 0.0613333, 0.0614667, 0.0616, 0.0617333, 0.0618667, 0.062, 0.0621333, 0.0622667, 0.0624, 0.0625333, 0.0626667, 0.0628, 0.0629333, 0.0630667, 0.0632, 0.0633333, 0.0634667, 0.0636, 0.0637333, 0.0638667, 0.064, 0.0641333, 0.0642667, 0.0644, 0.0645333, 0.0646667, 0.0648, 0.0649333, 0.0650667, 0.0652, 0.0653333, 0.0654667, 0.0656, 0.0657333, 0.0658667, 0.066, 0.0661333, 0.0662667, 0.0664, 0.0665333, 0.0666667, 0.0668, 0.0669333, 0.0670667, 0.0672, 0.0673333, 0.0674667, 0.0676, 0.0677333, 0.0678667, 0.068, 0.0681333, 0.0682667, 0.0684, 0.0685333, 0.0686667, 0.0688, 0.0689333, 0.0690667, 0.0692, 0.0693333, 0.0694667, 0.0696, 0.0697333, 0.0698667, 0.07, 0.0701333, 0.0702667, 0.0704, 0.0705333, 0.0706667, 0.0708, 0.0709333, 0.0710667, 0.0712, 0.0713333, 0.0714667, 0.0716, 0.0717333, 0.0718667, 0.072, 0.0721333, 0.0722667, 0.0724, 0.0725333, 0.0726667, 0.0728, 0.0729333, 0.0730667, 0.0732, 0.0733333, 0.0734667, 0.0736, 0.0737333, 0.0738667, 0.074, 0.0741333, 0.0742667, 0.0744, 0.0745333, 0.0746667, 0.0748, 0.0749333, 0.0750667, 0.0752, 0.0753333, 0.0754667, 0.0756, 0.0757333, 0.0758667, 0.076, 0.0761333, 0.0762667, 0.0764, 0.0765333, 0.0766667, 0.0768, 0.0769333, 0.0770667, 0.0772, 0.0773333, 0.0774667, 0.0776, 0.0777333, 0.0778667, 0.078, 0.0781333, 0.0782667, 0.0784, 0.0785333, 0.0786667, 0.0788, 0.0789333, 0.0790667, 0.0792, 0.0793333, 0.0794667, 0.0796, 0.0797333, 0.0798667, 0.08, 0.0801333, 0.0802667, 0.0804, 0.0805333, 0.0806667, 0.0808, 0.0809333, 0.0810667, 0.0812, 0.0813333, 0.0814667, 0.0816, 0.0817333, 0.0818667, 0.082, 0.0821333, 0.0822667, 0.0824, 0.0825333, 0.0826667, 0.0828, 0.0829333, 0.0830667, 0.0832, 0.0833333, 0.0834667, 0.0836, 0.0837333, 0.0838667, 0.084, 0.0841333, 0.0842667, 0.0844, 0.0845333, 0.0846667, 0.0848, 0.0849333, 0.0850667, 0.0852, 0.0853333, 0.0854667, 0.0856, 0.0857333, 0.0858667, 0.086, 0.0861333, 0.0862667, 0.0864, 0.0865333, 0.0866667, 0.0868, 0.0869333, 0.0870667, 0.0872, 0.0873333, 0.0874667, 0.0876, 0.0877333, 0.0878667, 0.088, 0.0881333, 0.0882667, 0.0884, 0.0885333, 0.0886667, 0.0888, 0.0889333, 0.0890667, 0.0892, 0.0893333, 0.0894667, 0.0896, 0.0897333, 0.0898667, 0.09, 0.0901333, 0.0902667, 0.0904, 0.0905333, 0.0906667, 0.0908, 0.0909333, 0.0910667, 0.0912, 0.0913333, 0.0914667, 0.0916, 0.0917333, 0.0918667, 0.092, 0.0921333, 0.0922667, 0.0924, 0.0925333, 0.0926667, 0.0928, 0.0929333, 0.0930667, 0.0932, 0.0933333, 0.0934667, 0.0936, 0.0937333, 0.0938667, 0.094, 0.0941333, 0.0942667, 0.0944, 0.0945333, 0.0946667, 0.0948, 0.0949333, 0.0950667, 0.0952, 0.0953333, 0.0954667, 0.0956, 0.0957333, 0.0958667, 0.096, 0.0961333, 0.0962667, 0.0964, 0.0965333, 0.0966667, 0.0968, 0.0969333, 0.0970667, 0.0972, 0.0973333, 0.0974667, 0.0976, 0.0977333, 0.0978667, 0.098, 0.0981333, 0.0982667, 0.0984, 0.0985333, 0.0986667, 0.0988, 0.0989333, 0.0990667, 0.0992, 0.0993333, 0.0994667, 0.0996, 0.0997333, 0.0998667, 0.1, 0.100133, 0.100267, 0.1004, 0.100533, 0.100667, 0.1008, 0.100933, 0.101067, 0.1012, 0.101333, 0.101467, 0.1016, 0.101733, 0.101867, 0.102, 0.102133, 0.102267, 0.1024, 0.102533, 0.102667, 0.1028, 0.102933, 0.103067, 0.1032, 0.103333, 0.103467, 0.1036, 0.103733, 0.103867, 0.104, 0.104133, 0.104267, 0.1044, 0.104533, 0.104667, 0.1048, 0.104933, 0.105067, 0.1052, 0.105333, 0.105467, 0.1056, 0.105733, 0.105867, 0.106, 0.106133, 0.106267, 0.1064, 0.106533, 0.106667, 0.1068, 0.106933, 0.107067, 0.1072, 0.107333, 0.107467, 0.1076, 0.107733, 0.107867, 0.108, 0.108133, 0.108267, 0.1084, 0.108533, 0.108667, 0.1088, 0.108933, 0.109067, 0.1092, 0.109333, 0.109467, 0.1096, 0.109733, 0.109867, 0.11, 0.110133, 0.110267, 0.1104, 0.110533, 0.110667, 0.1108, 0.110933, 0.111067, 0.1112, 0.111333, 0.111467, 0.1116, 0.111733, 0.111867, 0.112, 0.112133, 0.112267, 0.1124, 0.112533, 0.112667, 0.1128, 0.112933, 0.113067, 0.1132, 0.113333, 0.113467, 0.1136, 0.113733, 0.113867, 0.114, 0.114133, 0.114267, 0.1144, 0.114533, 0.114667, 0.1148, 0.114933, 0.115067, 0.1152, 0.115333, 0.115467, 0.1156, 0.115733, 0.115867, 0.116, 0.116133, 0.116267, 0.1164, 0.116533, 0.116667, 0.1168, 0.116933, 0.117067, 0.1172, 0.117333, 0.117467, 0.1176, 0.117733, 0.117867, 0.118, 0.118133, 0.118267, 0.1184, 0.118533, 0.118667, 0.1188, 0.118933, 0.119067, 0.1192, 0.119333, 0.119467, 0.1196, 0.119733, 0.119867, 0.12, 0.120133, 0.120267, 0.1204, 0.120533, 0.120667, 0.1208, 0.120933, 0.121067, 0.1212, 0.121333, 0.121467, 0.1216, 0.121733, 0.121867, 0.122, 0.122133, 0.122267, 0.1224, 0.122533, 0.122667, 0.1228, 0.122933, 0.123067, 0.1232, 0.123333, 0.123467, 0.1236, 0.123733, 0.123867, 0.124, 0.124133, 0.124267, 0.1244, 0.124533, 0.124667, 0.1248, 0.124933, 0.125067, 0.1252, 0.125333, 0.125467, 0.1256, 0.125733, 0.125867, 0.126, 0.126133, 0.126267, 0.1264, 0.126533, 0.126667, 0.1268, 0.126933, 0.127067, 0.1272, 0.127333, 0.127467, 0.1276, 0.127733, 0.127867, 0.128, 0.128133, 0.128267, 0.1284, 0.128533, 0.128667, 0.1288, 0.128933, 0.129067, 0.1292, 0.129333, 0.129467, 0.1296, 0.129733, 0.129867, 0.13, 0.130133, 0.130267, 0.1304, 0.130533, 0.130667, 0.1308, 0.130933, 0.131067, 0.1312, 0.131333, 0.131467, 0.1316, 0.131733, 0.131867, 0.132, 0.132133, 0.132267, 0.1324, 0.132533, 0.132667, 0.1328, 0.132933, 0.133067, 0.1332, 0.133333, 0.133467, 0.1336, 0.133733, 0.133867, 0.134, 0.134133, 0.134267, 0.1344, 0.134533, 0.134667, 0.1348, 0.134933, 0.135067, 0.1352, 0.135333, 0.135467, 0.1356, 0.135733, 0.135867, 0.136, 0.136133, 0.136267, 0.1364, 0.136533, 0.136667, 0.1368, 0.136933, 0.137067, 0.1372, 0.137333, 0.137467, 0.1376, 0.137733, 0.137867, 0.138, 0.138133, 0.138267, 0.1384, 0.138533, 0.138667, 0.1388, 0.138933, 0.139067, 0.1392, 0.139333, 0.139467, 0.1396, 0.139733, 0.139867, 0.14, 0.140133, 0.140267, 0.1404, 0.140533, 0.140667, 0.1408, 0.140933, 0.141067, 0.1412, 0.141333, 0.141467, 0.1416, 0.141733, 0.141867, 0.142, 0.142133, 0.142267, 0.1424, 0.142533, 0.142667, 0.1428, 0.142933, 0.143067, 0.1432, 0.143333, 0.143467, 0.1436, 0.143733, 0.143867, 0.144, 0.144133, 0.144267, 0.1444, 0.144533, 0.144667, 0.1448, 0.144933, 0.145067, 0.1452, 0.145333, 0.145467, 0.1456, 0.145733, 0.145867, 0.146, 0.146133, 0.146267, 0.1464, 0.146533, 0.146667, 0.1468, 0.146933, 0.147067, 0.1472, 0.147333, 0.147467, 0.1476, 0.147733, 0.147867, 0.148, 0.148133, 0.148267, 0.1484, 0.148533, 0.148667, 0.1488, 0.148933, 0.149067, 0.1492, 0.149333, 0.149467, 0.1496, 0.149733, 0.149867, 0.15, 0.150133, 0.150267, 0.1504, 0.150533, 0.150667, 0.1508, 0.150933, 0.151067, 0.1512, 0.151333, 0.151467, 0.1516, 0.151733, 0.151867, 0.152, 0.152133, 0.152267, 0.1524, 0.152533, 0.152667, 0.1528, 0.152933, 0.153067, 0.1532, 0.153333, 0.153467, 0.1536, 0.153733, 0.153867, 0.154, 0.154133, 0.154267, 0.1544, 0.154533, 0.154667, 0.1548, 0.154933, 0.155067, 0.1552, 0.155333, 0.155467, 0.1556, 0.155733, 0.155867, 0.156, 0.156133, 0.156267, 0.1564, 0.156533, 0.156667, 0.1568, 0.156933, 0.157067, 0.1572, 0.157333, 0.157467, 0.1576, 0.157733, 0.157867, 0.158, 0.158133, 0.158267, 0.1584, 0.158533, 0.158667, 0.1588, 0.158933, 0.159067, 0.1592, 0.159333, 0.159467, 0.1596, 0.159733, 0.159867, 0.16, 0.160133, 0.160267, 0.1604, 0.160533, 0.160667, 0.1608, 0.160933, 0.161067, 0.1612, 0.161333, 0.161467, 0.1616, 0.161733, 0.161867, 0.162, 0.162133, 0.162267, 0.1624, 0.162533, 0.162667, 0.1628, 0.162933, 0.163067, 0.1632, 0.163333, 0.163467, 0.1636, 0.163733, 0.163867, 0.164, 0.164133, 0.164267, 0.1644, 0.164533, 0.164667, 0.1648, 0.164933, 0.165067, 0.1652, 0.165333, 0.165467, 0.1656, 0.165733, 0.165867, 0.166, 0.166133, 0.166267, 0.1664, 0.166533, 0.166667, 0.1668, 0.166933, 0.167067, 0.1672, 0.167333, 0.167467, 0.1676, 0.167733, 0.167867, 0.168, 0.168133, 0.168267, 0.1684, 0.168533, 0.168667, 0.1688, 0.168933, 0.169067, 0.1692, 0.169333, 0.169467, 0.1696, 0.169733, 0.169867, 0.17, 0.170133, 0.170267, 0.1704, 0.170533, 0.170667, 0.1708, 0.170933, 0.171067, 0.1712, 0.171333, 0.171467, 0.1716, 0.171733, 0.171867, 0.172, 0.172133, 0.172267, 0.1724, 0.172533, 0.172667, 0.1728, 0.172933, 0.173067, 0.1732, 0.173333, 0.173467, 0.1736, 0.173733, 0.173867, 0.174, 0.174133, 0.174267, 0.1744, 0.174533, 0.174667, 0.1748, 0.174933, 0.175067, 0.1752, 0.175333, 0.175467, 0.1756, 0.175733, 0.175867, 0.176, 0.176133, 0.176267, 0.1764, 0.176533, 0.176667, 0.1768, 0.176933, 0.177067, 0.1772, 0.177333, 0.177467, 0.1776, 0.177733, 0.177867, 0.178, 0.178133, 0.178267, 0.1784, 0.178533, 0.178667, 0.1788, 0.178933, 0.179067, 0.1792, 0.179333, 0.179467, 0.1796, 0.179733, 0.179867, 0.18, 0.180133, 0.180267, 0.1804, 0.180533, 0.180667, 0.1808, 0.180933, 0.181067, 0.1812, 0.181333, 0.181467, 0.1816, 0.181733, 0.181867, 0.182, 0.182133, 0.182267, 0.1824, 0.182533, 0.182667, 0.1828, 0.182933, 0.183067, 0.1832, 0.183333, 0.183467, 0.1836, 0.183733, 0.183867, 0.184, 0.184133, 0.184267, 0.1844, 0.184533, 0.184667, 0.1848, 0.184933, 0.185067, 0.1852, 0.185333, 0.185467, 0.1856, 0.185733, 0.185867, 0.186, 0.186133, 0.186267, 0.1864, 0.186533, 0.186667, 0.1868, 0.186933, 0.187067, 0.1872, 0.187333, 0.187467, 0.1876, 0.187733, 0.187867, 0.188, 0.188133, 0.188267, 0.1884, 0.188533, 0.188667, 0.1888, 0.188933, 0.189067, 0.1892, 0.189333, 0.189467, 0.1896, 0.189733, 0.189867, 0.19, 0.190133, 0.190267, 0.1904, 0.190533, 0.190667, 0.1908, 0.190933, 0.191067, 0.1912, 0.191333, 0.191467, 0.1916, 0.191733, 0.191867, 0.192, 0.192133, 0.192267, 0.1924, 0.192533, 0.192667, 0.1928, 0.192933, 0.193067, 0.1932, 0.193333, 0.193467, 0.1936, 0.193733, 0.193867, 0.194, 0.194133, 0.194267, 0.1944, 0.194533, 0.194667, 0.1948, 0.194933, 0.195067, 0.1952, 0.195333, 0.195467, 0.1956, 0.195733, 0.195867, 0.196, 0.196133, 0.196267, 0.1964, 0.196533, 0.196667, 0.1968, 0.196933, 0.197067, 0.1972, 0.197333, 0.197467, 0.1976, 0.197733, 0.197867, 0.198, 0.198133, 0.198267, 0.1984, 0.198533, 0.198667, 0.1988, 0.198933, 0.199067, 0.1992, 0.199333, 0.199467, 0.1996, 0.199733, 0.199867, 0.2, 0.2, 0.206667, 0.213333, 0.22, 0.226667, 0.233333, 0.24, 0.246667, 0.253333, 0.26, 0.266667, 0.273333, 0.28, 0.286667, 0.293333, 0.3, 0.3, 0.306667, 0.313333, 0.32, 0.326667, 0.333333, 0.34, 0.346667, 0.353333, 0.36, 0.366667, 0.373333, 0.38, 0.386667, 0.393333, 0.4, 0.4, 0.413333, 0.426667, 0.44, 0.453333, 0.466667, 0.48, 0.493333, 0.506667, 0.52, 0.533333, 0.546667, 0.56, 0.573333, 0.586667, 0.6, 0.6, 0.601333, 0.602667, 0.604, 0.605333, 0.606667, 0.608, 0.609333, 0.610667, 0.612, 0.613333, 0.614667, 0.616, 0.617333, 0.618667, 0.62, 0.62, 0.621333, 0.622667, 0.624, 0.625333, 0.626667, 0.628, 0.629333, 0.630667, 0.632, 0.633333, 0.634667, 0.636, 0.637333, 0.638667, 0.64, 0.64, 0.664, 0.688, 0.712, 0.736, 0.76, 0.784, 0.808, 0.832, 0.856, 0.88, 0.904, 0.928, 0.952, 0.976, 1-EPS};

    //temps pour "exmpleSplinePtsPassage_maxSmoothness.txt"
//    tp = {0, 0.002, 0.004, 0.006, 0.008, 0.01, 0.012, 0.014, 0.016, 0.018, 0.02, 0.022, 0.024, 0.026, 0.028, 0.03, 0.032, 0.034, 0.036, 0.038, 0.04, 0.042, 0.044, 0.046, 0.048, 0.05, 0.052, 0.054, 0.056, 0.058, 0.06, 0.062, 0.064, 0.066, 0.068, 0.07, 0.072, 0.074, 0.076, 0.078, 0.08, 0.082, 0.084, 0.086, 0.088, 0.09, 0.092, 0.094, 0.096, 0.098, 0.1, 0.102, 0.104, 0.106, 0.108, 0.11, 0.112, 0.114, 0.116, 0.118, 0.12, 0.122, 0.124, 0.126, 0.128, 0.13, 0.132, 0.134, 0.136, 0.138, 0.14, 0.142, 0.144, 0.146, 0.148, 0.15, 0.152, 0.154, 0.156, 0.158, 0.16, 0.162, 0.164, 0.166, 0.168, 0.17, 0.172, 0.174, 0.176, 0.178, 0.18, 0.182, 0.184, 0.186, 0.188, 0.19, 0.192, 0.194, 0.196, 0.198, 0.2, 0.2, 0.201, 0.202, 0.203, 0.204, 0.205, 0.206, 0.207, 0.208, 0.209, 0.21, 0.211, 0.212, 0.213, 0.214, 0.215, 0.216, 0.217, 0.218, 0.219, 0.22, 0.221, 0.222, 0.223, 0.224, 0.225, 0.226, 0.227, 0.228, 0.229, 0.23, 0.231, 0.232, 0.233, 0.234, 0.235, 0.236, 0.237, 0.238, 0.239, 0.24, 0.241, 0.242, 0.243, 0.244, 0.245, 0.246, 0.247, 0.248, 0.249, 0.25, 0.251, 0.252, 0.253, 0.254, 0.255, 0.256, 0.257, 0.258, 0.259, 0.26, 0.261, 0.262, 0.263, 0.264, 0.265, 0.266, 0.267, 0.268, 0.269, 0.27, 0.271, 0.272, 0.273, 0.274, 0.275, 0.276, 0.277, 0.278, 0.279, 0.28, 0.281, 0.282, 0.283, 0.284, 0.285, 0.286, 0.287, 0.288, 0.289, 0.29, 0.291, 0.292, 0.293, 0.294, 0.295, 0.296, 0.297, 0.298, 0.299, 0.3, 0.3, 0.301, 0.302, 0.303, 0.304, 0.305, 0.306, 0.307, 0.308, 0.309, 0.31, 0.311, 0.312, 0.313, 0.314, 0.315, 0.316, 0.317, 0.318, 0.319, 0.32, 0.321, 0.322, 0.323, 0.324, 0.325, 0.326, 0.327, 0.328, 0.329, 0.33, 0.331, 0.332, 0.333, 0.334, 0.335, 0.336, 0.337, 0.338, 0.339, 0.34, 0.341, 0.342, 0.343, 0.344, 0.345, 0.346, 0.347, 0.348, 0.349, 0.35, 0.351, 0.352, 0.353, 0.354, 0.355, 0.356, 0.357, 0.358, 0.359, 0.36, 0.361, 0.362, 0.363, 0.364, 0.365, 0.366, 0.367, 0.368, 0.369, 0.37, 0.371, 0.372, 0.373, 0.374, 0.375, 0.376, 0.377, 0.378, 0.379, 0.38, 0.381, 0.382, 0.383, 0.384, 0.385, 0.386, 0.387, 0.388, 0.389, 0.39, 0.391, 0.392, 0.393, 0.394, 0.395, 0.396, 0.397, 0.398, 0.399, 0.4, 0.4, 0.402, 0.404, 0.406, 0.408, 0.41, 0.412, 0.414, 0.416, 0.418, 0.42, 0.422, 0.424, 0.426, 0.428, 0.43, 0.432, 0.434, 0.436, 0.438, 0.44, 0.442, 0.444, 0.446, 0.448, 0.45, 0.452, 0.454, 0.456, 0.458, 0.46, 0.462, 0.464, 0.466, 0.468, 0.47, 0.472, 0.474, 0.476, 0.478, 0.48, 0.482, 0.484, 0.486, 0.488, 0.49, 0.492, 0.494, 0.496, 0.498, 0.5, 0.502, 0.504, 0.506, 0.508, 0.51, 0.512, 0.514, 0.516, 0.518, 0.52, 0.522, 0.524, 0.526, 0.528, 0.53, 0.532, 0.534, 0.536, 0.538, 0.54, 0.542, 0.544, 0.546, 0.548, 0.55, 0.552, 0.554, 0.556, 0.558, 0.56, 0.562, 0.564, 0.566, 0.568, 0.57, 0.572, 0.574, 0.576, 0.578, 0.58, 0.582, 0.584, 0.586, 0.588, 0.59, 0.592, 0.594, 0.596, 0.598, 0.6, 0.6, 0.6002, 0.6004, 0.6006, 0.6008, 0.601, 0.6012, 0.6014, 0.6016, 0.6018, 0.602, 0.6022, 0.6024, 0.6026, 0.6028, 0.603, 0.6032, 0.6034, 0.6036, 0.6038, 0.604, 0.6042, 0.6044, 0.6046, 0.6048, 0.605, 0.6052, 0.6054, 0.6056, 0.6058, 0.606, 0.6062, 0.6064, 0.6066, 0.6068, 0.607, 0.6072, 0.6074, 0.6076, 0.6078, 0.608, 0.6082, 0.6084, 0.6086, 0.6088, 0.609, 0.6092, 0.6094, 0.6096, 0.6098, 0.61, 0.6102, 0.6104, 0.6106, 0.6108, 0.611, 0.6112, 0.6114, 0.6116, 0.6118, 0.612, 0.6122, 0.6124, 0.6126, 0.6128, 0.613, 0.6132, 0.6134, 0.6136, 0.6138, 0.614, 0.6142, 0.6144, 0.6146, 0.6148, 0.615, 0.6152, 0.6154, 0.6156, 0.6158, 0.616, 0.6162, 0.6164, 0.6166, 0.6168, 0.617, 0.6172, 0.6174, 0.6176, 0.6178, 0.618, 0.6182, 0.6184, 0.6186, 0.6188, 0.619, 0.6192, 0.6194, 0.6196, 0.6198, 0.62, 0.62, 0.6202, 0.6204, 0.6206, 0.6208, 0.621, 0.6212, 0.6214, 0.6216, 0.6218, 0.622, 0.6222, 0.6224, 0.6226, 0.6228, 0.623, 0.6232, 0.6234, 0.6236, 0.6238, 0.624, 0.6242, 0.6244, 0.6246, 0.6248, 0.625, 0.6252, 0.6254, 0.6256, 0.6258, 0.626, 0.6262, 0.6264, 0.6266, 0.6268, 0.627, 0.6272, 0.6274, 0.6276, 0.6278, 0.628, 0.6282, 0.6284, 0.6286, 0.6288, 0.629, 0.6292, 0.6294, 0.6296, 0.6298, 0.63, 0.6302, 0.6304, 0.6306, 0.6308, 0.631, 0.6312, 0.6314, 0.6316, 0.6318, 0.632, 0.6322, 0.6324, 0.6326, 0.6328, 0.633, 0.6332, 0.6334, 0.6336, 0.6338, 0.634, 0.6342, 0.6344, 0.6346, 0.6348, 0.635, 0.6352, 0.6354, 0.6356, 0.6358, 0.636, 0.6362, 0.6364, 0.6366, 0.6368, 0.637, 0.6372, 0.6374, 0.6376, 0.6378, 0.638, 0.6382, 0.6384, 0.6386, 0.6388, 0.639, 0.6392, 0.6394, 0.6396, 0.6398, 0.64, 0.64, 0.6436, 0.6472, 0.6508, 0.6544, 0.658, 0.6616, 0.6652, 0.6688, 0.6724, 0.676, 0.6796, 0.6832, 0.6868, 0.6904, 0.694, 0.6976, 0.7012, 0.7048, 0.7084, 0.712, 0.7156, 0.7192, 0.7228, 0.7264, 0.73, 0.7336, 0.7372, 0.7408, 0.7444, 0.748, 0.7516, 0.7552, 0.7588, 0.7624, 0.766, 0.7696, 0.7732, 0.7768, 0.7804, 0.784, 0.7876, 0.7912, 0.7948, 0.7984, 0.802, 0.8056, 0.8092, 0.8128, 0.8164, 0.82, 0.8236, 0.8272, 0.8308, 0.8344, 0.838, 0.8416, 0.8452, 0.8488, 0.8524, 0.856, 0.8596, 0.8632, 0.8668, 0.8704, 0.874, 0.8776, 0.8812, 0.8848, 0.8884, 0.892, 0.8956, 0.8992, 0.9028, 0.9064, 0.91, 0.9136, 0.9172, 0.9208, 0.9244, 0.928, 0.9316, 0.9352, 0.9388, 0.9424, 0.946, 0.9496, 0.9532, 0.9568, 0.9604, 0.964, 0.9676, 0.9712, 0.9748, 0.9784, 0.982, 0.9856, 0.9892, 0.9928, 0.9964, 1};

      //temps pour "exempleSplinePtsPassage_4.txt" -> objectif 3 noeuds en 0.5
//    tp = {0, 0.0333333, 0.0666667, 0.1, 0.133333, 0.166667, 0.2, 0.233333, 0.266667, 0.3, 0.333333, 0.366667, 0.4, 0.433333, 0.466667, 0.5,
//          0.5, 0.533333, 0.566667, 0.6, 0.633333, 0.666667, 0.7, 0.733333, 0.766667, 0.8, 0.833333, 0.866667, 0.9, 0.933333, 0.966667, 1};

    xPoints = xVec.data();
    yPoints = yVec.data();

    if(oldMethod){
        compute2003();
    }else{
        computeNew();
    }
}

void Population::compute2003()
{
    //calculer la fitness de chaque individu et la fitness moyenne
    individuals[0].calculateFitness(tp,xPoints,yPoints, degree);
    bestIndividual  = new Individual(individuals[0]);
    avgFitness = individuals[0].getFitness();
    for(int i = 1 ; i<static_cast<int>(individuals.size()) ; i++)
    {
        individuals[i].calculateFitness(tp,xPoints,yPoints, degree);
        if(bestIndividual->getFitness() > individuals[i].getFitness()){
            bestIndividual = &(individuals[i]);
        }
        avgFitness += individuals[i].getFitness();
    }
    avgFitness /= static_cast<double>(individuals.size());

    qDebug()<<"gene"<<-1<<"meill F"<<bestIndividual->getFitness()<<"taille"<<bestIndividual->getKnots().size()-(2*(degree+1))<<"moy F"<<avgFitness;
    int indiIndex1,indiIndex2;

    for(int generation = 0 ; generation < 500 ; generation++)
    {

        //selectoinner deux individus diff√©rents al√©atoirement
        selection2003(indiIndex1, indiIndex2);

        //croiser les individus
        crossover2003(indiIndex1, indiIndex2);

        //calculer la fitness des individus modifi√©s, la fitness moyenne, changer le meilleur indiidu s'il y en a un meilleur que le meilleur
        calcFitness2003(indiIndex1, indiIndex2, generation);

        //mutations
        mutation2003(indiIndex1);
        mutation2003(indiIndex2);

        //calculer la fitness des individus modifi√©s, la fitness moyenne, changer le meilleur indiidu s'il y en a un meilleur que le meilleur
        calcFitness2003(indiIndex1, indiIndex2, generation);

    }

    qDebug()<<"best fitness"<<bestIndividual->getFitness();
    qDebug()<<"best errY"<<bestIndividual->getErrY();
    qDebug()<<"best length"<<bestIndividual->getKnots().length()-(2*(degree+1));
}

Individual *Population::getBestIndividual() const
{
    return bestIndividual;
}

QVector<double> Population::getTp() const
{
    return tp;
}

void Population::calcFitness2003(int index1, int index2, int generation)
{
    individuals[index1].calculateFitness(tp,xPoints,yPoints, degree);
    individuals[index2].calculateFitness(tp,xPoints,yPoints, degree);
    double avgF = 0;
    for(int i = 0 ; i<static_cast<int>(individuals.size()) ; i++)
    {
        avgF += individuals[i].getFitness();
        if(bestIndividual->getFitness() > individuals[i].getFitness()){
            bestIndividual = &(individuals[i]);
            qDebug()<<"gene"<<generation<<"meill F"<<bestIndividual->getFitness()<<"taille"<<bestIndividual->getKnots().size()-(2*(degree+1))<<"moy F"<<avgFitness;
        }
    }
    avgFitness = avgF/(static_cast<double>(individuals.size()));
}

void Population::selection2003(int &index1, int &index2)
{
    do{
        index1 = rand()%individuals.size();
        index2 = rand()%individuals.size();
    }while(index1 == index2);
}

void Population::crossover2003(int index1, int index2)
{
    double proba = 1;
    double minF = std::min(individuals[index1].getFitness(),individuals[index2].getFitness());
    if(minF <= avgFitness){
        proba = (minF-bestIndividual->getFitness()) / (avgFitness-bestIndividual->getFitness());
    }
    if(rand()/static_cast<double>(RAND_MAX) <= proba){
        if(&(individuals[index1]) == bestIndividual || &(individuals[index2]) == bestIndividual){
            qDebug()<<"erreur : meilleur crossover";
        }

        individuals[index1].crossover2003(individuals[index2]);

        //compute fitness
        individuals[index1].calculateFitness(tp,xPoints,yPoints, degree);
        individuals[index2].calculateFitness(tp,xPoints,yPoints, degree);
    }
}

void Population::mutation2003(int index)
{
    double proba = 0.5;
    if(individuals[index].getFitness() <= avgFitness){
        proba *= (individuals[index].getFitness()-bestIndividual->getFitness()) / (avgFitness-bestIndividual->getFitness());
    }
    individuals[index].mutate2003(proba, degree);
}

void Population::computeNew()
{
    //calculer la fitness de chaque individu et la fitness moyenne de la population
    individuals[0].calculateFitness(tp,xPoints,yPoints, degree);
    bestIndividual  = new Individual(individuals[0]);
    avgFitness = individuals[0].getFitness();
    for(int i = 1 ; i<static_cast<int>(individuals.size()) ; i++)
    {
        individuals[i].calculateFitness(tp,xPoints,yPoints, degree);
        avgFitness += individuals[i].getFitness();
    }
    avgFitness /= static_cast<double>(individuals.size());

    std::sort(individuals.begin(), individuals.end());
    bestIndividual = &(individuals[0]);

    int indiIndex1,indiIndex2;
    int generation=0;
//    for(int generation = 0 ; generation<100 ; generation++)
    //do while au lieu d'un while simple pour √©viter de ne rien faire si tous les individus sont similaires d√®s le d√©part
    do{
        nextGeneration.clear();
        nextGeneration.reserve(individuals.size()*2);
        nextGeneration = individuals;

        for(int i = 0 ; i<individuals.size()/2.0 ; i++){
            //choisir parents
            selectionNew(indiIndex1, indiIndex2);

            //cr√©er deux enfants dans "child1" et "child2"
            child1 = individuals[indiIndex1];
            child2 = individuals[indiIndex2];
                //au choix une des fonctions ci-dessous
//            child1.crossoverEqNbGenes_1(child2, degree);
            child1.crossoverEqNbGenes_2(child2, degree);
//            child1.crossover2003(child2);


            //muter les deux enfants
            child1.mutateNew(0.08, degree);
            child2.mutateNew(0.08, degree);

            //calculer fitness
            child1.calculateFitness(tp, xPoints, yPoints, degree);
            child2.calculateFitness(tp, xPoints, yPoints, degree);
//            child1.calculateFitnessAdaptTime(tp,xPoints,yPoints,degree,pPoints); //je ne suis pas s√ªr que l'algorithme peut converger avec cette fa√ßon de calculer la fitness
//            child2.calculateFitnessAdaptTime(tp,xPoints,yPoints,degree,pPoints);

            //ajouter les enfants √† la generation suivante
            nextGeneration.push_back(child1);
            nextGeneration.push_back(child2);
        }

        //ranger nextGeneration en fonction de la fitness des individus
        std::sort(nextGeneration.begin(), nextGeneration.end());

        //garder les meilleurs individus
        double avgF = 0;
        double avgNbKnots = 0;
        for(int i = 0 ; i<static_cast<int>(individuals.size()) ; i++){
            individuals[i] = nextGeneration[i];
            avgF += individuals[i].getFitness();
            avgNbKnots += individuals[i].getKnots().size();
        }

        avgFitness = avgF/static_cast<double>(individuals.size());
        avgNbKnots = (avgNbKnots/static_cast<double>(individuals.size()))-(2*(degree+1));

        qDebug()<<"generation"<<generation<<"fitness individual 0"<<individuals[0].getFitness()<<"gene length"<<individuals[0].getKnots().length()-(2*(degree+1));
        //        qDebug()<<"best individual"<<bestIndividual->getFitness()<<"gene length"<<bestIndividual->getKnots().length()-(2*(degree+1));
        qDebug()<<"avg fitness"<<avgFitness<<"avg nb of knots"<<avgNbKnots;

        generation++;
    }while(avgFitness-bestIndividual->getFitness() > 0.01);
}

void Population::selectionNew(int &index1, int &index2)
{
    //objectif general : choisir deux individus diff√©rents

    //trouver deux individus
    int i1 = rand()%individuals.size();
    int i2 = rand()%individuals.size();

    //retenir le meilleur des deux
    if(individuals[i1].getFitness() <= individuals[i2].getFitness()){
        index1 = i1;
    }else{
        index1 = i2;
    }

    //trouver deux individus diff√©rents √† l'indiidu retenu
    do{
        i1 = rand()%individuals.size();
        i2 = rand()%individuals.size();
    }while (i1 == index1 || i2 == index1);

    //retenir le meilleur des deux
    if(individuals[i1].getFitness() <= individuals[i2].getFitness()){
            index2 = i1;
    }else{
            index2 = i2;
    }
}
